// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using NPS;
//
//    var psnJson = PSNJson.FromJson(jsonString);
using System;
using System.Collections.Generic;

using System.Globalization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace PSN
{
    public partial class PSNJson
    {
        [JsonProperty("age_limit")]
        public long AgeLimit { get; set; }

        [JsonProperty("attributes")]
        public Attributes Attributes { get; set; }

        [JsonProperty("bucket")]
        public string Bucket { get; set; }

        [JsonProperty("cloud_only_platform")]
        public string[] CloudOnlyPlatform { get; set; }

        [JsonProperty("container_type")]
        public string ContainerType { get; set; }

        [JsonProperty("content_descriptors")]
        public ContentDescriptor[] ContentDescriptors { get; set; }

        [JsonProperty("content_origin")]
        public long ContentOrigin { get; set; }

        [JsonProperty("content_rating")]
        public ContentRating ContentRating { get; set; }

        [JsonProperty("content_type")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ContentType { get; set; }

        [JsonProperty("dob_required")]
        public bool DobRequired { get; set; }

        [JsonProperty("gameContentTypesList")]
        public GameContentTypesList[] GameContentTypesList { get; set; }

        [JsonProperty("game_contentType")]
        public string GameContentType { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("images")]
        public Image[] Images { get; set; }

        [JsonProperty("links")]
        public Link[] Links { get; set; }

        [JsonProperty("long_desc")]
        public string LongDesc { get; set; }

        [JsonProperty("media_layouts")]
        public MediaLayout[] MediaLayouts { get; set; }

        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("pageTypeId")]
        public long PageTypeId { get; set; }

        [JsonProperty("playable_platform")]
        public string[] PlayablePlatform { get; set; }

        [JsonProperty("promomedia")]
        public Promomedia[] Promomedia { get; set; }

        [JsonProperty("provider_name")]
        public string ProviderName { get; set; }

        [JsonProperty("relationships")]
        public Relationship[] Relationships { get; set; }

        [JsonProperty("release_date")]
        public DateTimeOffset ReleaseDate { get; set; }

        [JsonProperty("restricted")]
        public bool Restricted { get; set; }

        [JsonProperty("revision")]
        public long Revision { get; set; }

        [JsonProperty("short_name")]
        public string ShortName { get; set; }

        [JsonProperty("size")]
        public long Size { get; set; }

        [JsonProperty("sku_links")]
        public object[] SkuLinks { get; set; }

        [JsonProperty("sort")]
        public string Sort { get; set; }

        [JsonProperty("star_rating")]
        public StarRating StarRating { get; set; }

        [JsonProperty("start")]
        public long Start { get; set; }

        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }

        [JsonProperty("title_name")]
        public string TitleName { get; set; }

        [JsonProperty("top_category")]
        public string TopCategory { get; set; }

        [JsonProperty("total_results")]
        public long TotalResults { get; set; }
    }

    public partial class Attributes
    {
        [JsonProperty("facets")]
        public Facets Facets { get; set; }

        [JsonProperty("next")]
        public object[] Next { get; set; }
    }

    public partial class Facets
    {
        [JsonProperty("price")]
        public Price[] Price { get; set; }

        [JsonProperty("top_category")]
        public Price[] TopCategory { get; set; }

        [JsonProperty("relationship")]
        public Price[] Relationship { get; set; }
    }

    public partial class Price
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("key")]
        public string Key { get; set; }
    }

    public partial class ContentDescriptor
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("url")]
        public object Url { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class ContentRating
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("rating_system")]
        public string RatingSystem { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class GameContentTypesList
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("key")]
        public string Key { get; set; }
    }

    public partial class Image
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class Link
    {
        [JsonProperty("bucket")]
        public string Bucket { get; set; }

        [JsonProperty("container_type")]
        public string ContainerType { get; set; }

        [JsonProperty("content_type")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ContentType { get; set; }

        [JsonProperty("default_sku")]
        public DefaultSku DefaultSku { get; set; }

        [JsonProperty("gameContentTypesList")]
        public GameContentTypesList[] GameContentTypesList { get; set; }

        [JsonProperty("game_contentType")]
        public string GameContentType { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("images")]
        public Image[] Images { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("parent_name")]
        public string ParentName { get; set; }

        [JsonProperty("playable_platform")]
        public string[] PlayablePlatform { get; set; }

        [JsonProperty("provider_name")]
        public string ProviderName { get; set; }

        [JsonProperty("release_date")]
        public DateTimeOffset ReleaseDate { get; set; }

        [JsonProperty("restricted")]
        public bool Restricted { get; set; }

        [JsonProperty("revision")]
        public long Revision { get; set; }

        [JsonProperty("short_name")]
        public string ShortName { get; set; }

        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }

        [JsonProperty("top_category")]
        public string TopCategory { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class DefaultSku
    {
        [JsonProperty("amortizeFlag")]
        public bool AmortizeFlag { get; set; }

        [JsonProperty("bundleExclusiveFlag")]
        public bool BundleExclusiveFlag { get; set; }

        [JsonProperty("chargeImmediatelyFlag")]
        public bool ChargeImmediatelyFlag { get; set; }

        [JsonProperty("charge_type_id")]
        public long ChargeTypeId { get; set; }

        [JsonProperty("credit_card_required_flag")]
        public long CreditCardRequiredFlag { get; set; }

        [JsonProperty("defaultSku")]
        public bool DefaultSkuDefaultSku { get; set; }

        [JsonProperty("display_price")]
        public string DisplayPrice { get; set; }

        [JsonProperty("eligibilities")]
        public object[] Eligibilities { get; set; }

        [JsonProperty("entitlements")]
        public Entitlement[] Entitlements { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("is_original")]
        public bool IsOriginal { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("platforms")]
        public long[] Platforms { get; set; }

        [JsonProperty("price")]
        public long Price { get; set; }

        [JsonProperty("rewards")]
        public object[] Rewards { get; set; }

        [JsonProperty("seasonPassExclusiveFlag")]
        public bool SeasonPassExclusiveFlag { get; set; }

        [JsonProperty("skuAvailabilityOverrideFlag")]
        public bool SkuAvailabilityOverrideFlag { get; set; }

        [JsonProperty("sku_type")]
        public long SkuType { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class Entitlement
    {
        [JsonProperty("description")]
        public object Description { get; set; }

        [JsonProperty("drms")]
        public object[] Drms { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("durationOverrideTypeId")]
        public object DurationOverrideTypeId { get; set; }

        [JsonProperty("exp_after_first_use")]
        public long ExpAfterFirstUse { get; set; }

        [JsonProperty("feature_type_id")]
        public long FeatureTypeId { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("license_type")]
        public long LicenseType { get; set; }

        [JsonProperty("metadata")]
        public object Metadata { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("packageType")]
        public object PackageType { get; set; }

        [JsonProperty("packages")]
        public object[] Packages { get; set; }

        [JsonProperty("preorder_placeholder_flag")]
        public bool PreorderPlaceholderFlag { get; set; }

        [JsonProperty("size")]
        public long Size { get; set; }

        [JsonProperty("subType")]
        public long SubType { get; set; }

        [JsonProperty("subtitle_language_codes")]
        public object SubtitleLanguageCodes { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("use_count")]
        public long UseCount { get; set; }

        [JsonProperty("voice_language_codes")]
        public object VoiceLanguageCodes { get; set; }
    }

    public partial class MediaLayout
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }
    }

    public partial class Metadata
    {
        [JsonProperty("game_genre")]
        public ValuesPerPlatforms GameGenre { get; set; }

        [JsonProperty("cn_remotePlay")]
        public NameValuesContainer CnRemotePlay { get; set; }

        [JsonProperty("cloud_only_platform")]
        public NameValuesContainer CloudOnlyPlatform { get; set; }

        [JsonProperty("cn_vrRequired")]
        public ValuesPerPlatforms CnVrRequired { get; set; }

        [JsonProperty("cn_vrEnabled")]
        public ValuesPerPlatforms CnVrEnabled { get; set; }

        [JsonProperty("playable_platform")]
        public NameValuesContainer PlayablePlatform { get; set; }

        [JsonProperty("cn_dualshockVibration")]
        public ValuesPerPlatforms CnDualshockVibration { get; set; }

        [JsonProperty("tertiary_classification")]
        public NameValuesContainer TertiaryClassification { get; set; }

        [JsonProperty("cn_psVrAimRequired")]
        public ValuesPerPlatforms CnPsVrAimRequired { get; set; }

        [JsonProperty("genre")]
        public ValuesPerPlatforms Genre { get; set; }

        [JsonProperty("cn_crossPlatformPSVita")]
        public NameValuesContainer CnCrossPlatformPsVita { get; set; }

        [JsonProperty("secondary_classification")]
        public NameValuesContainer SecondaryClassification { get; set; }

        [JsonProperty("cn_psVrAimEnabled")]
        public ValuesPerPlatforms CnPsVrAimEnabled { get; set; }

        [JsonProperty("primary_classification")]
        public NameValuesContainer PrimaryClassification { get; set; }
    }

    public partial class NameValuesContainer
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("values")]
        public string[] Values { get; set; }
    }

    public partial class ValuesPerPlatforms
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("values")]
        public string[] Values { get; set; }

        [JsonProperty("targetPlatforms")]
        public string[] TargetPlatforms { get; set; }
    }

    public partial class Promomedia
    {
        [JsonProperty("anno")]
        public string Anno { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("key")]
        public string Key { get; set; }

        [JsonProperty("materials")]
        public Material[] Materials { get; set; }

        [JsonProperty("multi")]
        public string Multi { get; set; }

        [JsonProperty("rep")]
        public string Rep { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }
    }

    public partial class Material
    {
        [JsonProperty("anno")]
        public string Anno { get; set; }

        [JsonProperty("countries")]
        public CountryElement[] Countries { get; set; }

        [JsonProperty("from")]
        public DateTimeOffset From { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("lang")]
        public LangElement[] Lang { get; set; }

        [JsonProperty("lastm")]
        public DateTimeOffset Lastm { get; set; }

        [JsonProperty("until")]
        public DateTimeOffset Until { get; set; }

        [JsonProperty("urls", NullValueHandling = NullValueHandling.Ignore)]
        public Image[] Urls { get; set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Datum[] Data { get; set; }
    }

    public partial class CountryElement
    {
        [JsonProperty("agelimit")]
        public long Agelimit { get; set; }

        [JsonProperty("uagelimit")]
        public long Uagelimit { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("data")]
        public string Data { get; set; }
    }

    public partial class Relationship
    {
        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("key_name")]
        public string KeyName { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class StarRating
    {
        [JsonProperty("total")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Total { get; set; }

        [JsonProperty("score")]
        public string Score { get; set; }

        [JsonProperty("count")]
        public Count[] Count { get; set; }
    }

    public partial class Count
    {
        [JsonProperty("star")]
        public long Star { get; set; }

        [JsonProperty("count")]
        public long CountCount { get; set; }
    }

    public partial struct LangElement
    {
        public string Enum;
        public long? Integer;

        public static implicit operator LangElement(string Enum)
        {
            return new LangElement { Enum = Enum };
        }
        public static implicit operator LangElement(long Integer)
        {
            return new LangElement { Integer = Integer };
        }
    }

    public partial class PSNJson
    {
        public static PSNJson FromJson(string json)
        {
            return JsonConvert.DeserializeObject<PSNJson>(json, Converter.Settings);
        }
    }

    public static class Serialize
    {
        public static string ToJson(this PSNJson self)
        {
            return JsonConvert.SerializeObject(self, Converter.Settings);
        }
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                DecodeArrayConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t)
        {
            return t == typeof(long) || t == typeof(long?);
        }

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class DecodeArrayConverter : JsonConverter
    {
        public override bool CanConvert(Type t)
        {
            return t == typeof(long[]);
        }

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            reader.Read();
            var value = new List<long>();
            while (reader.TokenType != JsonToken.EndArray)
            {
                var converter = ParseStringConverter.Singleton;
                var arrayItem = (long)converter.ReadJson(reader, typeof(long), null, serializer);
                value.Add(arrayItem);
                reader.Read();
            }
            return value.ToArray();
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (long[])untypedValue;
            writer.WriteStartArray();
            foreach (var arrayItem in value)
            {
                var converter = ParseStringConverter.Singleton;
                converter.WriteJson(writer, arrayItem, serializer);
            }
            writer.WriteEndArray();
            return;
        }

        public static readonly DecodeArrayConverter Singleton = new DecodeArrayConverter();
    }
}
